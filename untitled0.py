# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zppAK7b_-wsBIv-Z7-zYhxlCtppDOTan
"""

# Commented out IPython magic to ensure Python compatibility.
#importar dependencias de librerías
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
# %matplotlib inline
from matplotlib import pyplot as plt
plt.style.use('bmh')

#Carga de datos (extraído el csv de netflix en kaggle)
from google.colab import files
uploaded = files.upload()

#lectura y extracción de datos a un marco de datos guíado por el csv ya importado
df = pd.read_csv('NFLX(1).csv')
df.head(6)

#numero de días que hará la predicción
df.shape

#mostrar el precio de cierre
plt.figure(figsize=(16,8))
plt.title('Netflix')
plt.xlabel('Días')
plt.ylabel('Cierre de precio en dólares($.) ')
plt.plot(df['Close'])
plt.show()

#los datos de cierre por precio
df = df [['Close']]
df.head(4)

# variable para predecir días 
future_days = 25
#nuva columna para mostrar lo días de la predición
df['Prediction'] = df[['Close']].shift(-future_days)
df.tail(4)

#data set x - eliminar último día de predicción por fila/días
x = np.array(df.drop(['Predicción'],1))[:-future_days]
print(x)

#data set y - donde obtiene valores excepto los que está en X 
y = np.array(df['Predicción'])[:-future_days]
print(y)

#partir en entramiento y prueba , entrenamiento 75% y test 25%
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

#crear modelos de entrenamiento
tree = DecisionTreeRegressor().fit(x_train, y_train)
lr = LinearRegression().fit(x_train, y_train)

#obtener ultima fila de X
x_future = df.drop(['Predicción'],1) [:-future_days]
x_future =  x_future.tail(future_days)
x_future = np.array(x_future)
x_future

#mostrar los modelos con predicción
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#mostrar los datos
predictions = tree_prediction

valid = df[x.shape[0]:]
valid['Predicciones'] = predictions
plt.figure(figsize=(16,8))
plt.title('Modelo')
plt.xlabel('Días')
plt.ylabel('Cierre de precio en dólares($.) ')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predicciones']])
plt.legend(['Orig','Val', 'Pred'])
plt.show()